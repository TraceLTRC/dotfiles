#! /bin/bash
# 
# Program to automatically set the cpu governer based on battery capacity.
# If the battery is above 20%, it'll use the preferred governor (the governor the user wants)
# If the battery is below 20% or equal, it'll use powersave
# If the battery is being charged, it will use the preferred governor

SERVICE_NAME="autogovernor"
SYS_BAT="/sys/class/power_supply/BAT1/capacity"
SYS_POW="/sys/class/power_supply/ACAD/online"
GOVERNOR_FILE="/home/$(logname)/.local/state/tracel/governor"

die () {
  echo "$@"
  exit 1
}

log_info () {
  echo "$@" | systemd-cat -t "$SERVICE_NAME" -p info
}

log_warning() {
  echo "$@" | systemd-cat -t "$SERVICE_NAME" -p warning
}

get_battery() {
  local bat_cap=$(cat "$SYS_BAT")
  echo "$bat_cap"
}

set_prefer_governor() {
  echo "$1" > "$GOVERNOR_FILE"
}

get_governor() {
  if [[ -e "$GOVERNOR_FILE" ]]; then
    echo "$(cat $GOVERNOR_FILE)"
  else
    echo "performance"
  fi
}

is_charging() {
  local online=$(cat "$SYS_POW")
  if [[ "$online" -eq 1 ]]; then
    return 0
  else
    return 1
  fi
}

init_cutoff() {
  if [[ -z "$POWERSAVE_CUTOFF" ]]; then
    POWERSAVE_CUTOFF=20
  fi
}

set_governor() {
  if [[ ! $(cpupower frequency-info -p | grep "$1") ]]; then
    log_info "Setting CPU Governor to $1"
    cpupower frequency-set -g "$1"
  fi
}

check_governor() {
  init_cutoff

  local PREFERRED_GOVERNOR=$(get_governor)

  if is_charging; then
    set_governor "$PREFERRED_GOVERNOR"
  else
    local bat=$(get_battery)

    if [[ "$bat" -le "$POWERSAVE_CUTOFF" ]]; then
      set_governor "powersave"
    else
      set_governor "$PREFERRED_GOVERNOR"
    fi
  fi
}

case $1 in
  check)
    check_governor
    ;;
  set)
    set_prefer_governor "$2"
    ;;
  *)
    die "Invalid command!"
    ;;
esac
